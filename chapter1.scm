(car '(a b c))
(car '((a b c) x y z))
(car hotdog)
(car ())
(car '(((hotdogs)) (and) (pickle) relish))
(car (car '(((hotdogs)) (and))))
(cdr '(a b c))
(cdr '((a b c) x y z))
(car (cdr '((b) (x y) ((c)))))
(cdr (cdr '((b) (x y) ((c)))))
(cdr (car '(a (b (c)) d)))

(cons 'peanut '(butter and jelly))
(cons '(banana and) '(peanut butter and jelly))
(cons '((help) this) '(is very ((hard) to learn)))
(cons '(a b (c)) ())
(cons '(a) ())
(cons '((a b c)) 'b)
(cons 'a 'b)
(cons 'a (car '((b) c d)))
(cons 'a (cdr '((b) c d)))

(null? ())
(null? (quote ()))
(null? '(a b c))
(null? 'spaghetti)

(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))
(atom? '0)
(define s 'Harry)
(atom? s)
(define l '(Harry had a heap of apples))
(atom? (car l))
(atom? (cdr l))
(define l '(Harry))
(atom? (cdr l))
(define l '(swing low sweet cherry oat))
(atom? (car (cdr l)))

(define a1 'Harry)
(define a2 'Harry)
(eq? a1 a2)
(define a1 'margarine)
(define a2 'butter)
(eq? a1 a2)
(define l1 '())
(define l2 '(strawberry))
(eq? l1 l2)
(define n1 6)
(define n2 6)
(eq? n1 n2)

